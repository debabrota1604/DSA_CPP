In C++, memory management is crucial in non-garbage collected environments, where the responsibility for memory allocation and deallocation lies with the programmer. Failing to manage memory properly can lead to memory leaks, resource exhaustion, and undefined behavior. Here are some key memory management techniques used in non-garbage collected environments:

1. Manual Memory Allocation (new and delete): In C++, you can manually allocate memory for objects using the new operator and deallocate it using the delete operator. It is essential to ensure that every object allocated with new is eventually deallocated with delete to avoid memory leaks.
    Example:
        int* ptr = new int; // Allocate memory for an integer
        *ptr = 42; // Assign a value to the allocated memory

        delete ptr; // Deallocate memory when done with the object


2. Smart Pointers: Smart pointers are RAII (Resource Acquisition Is Initialization) objects that automatically manage the memory and deallocate it when it is no longer needed. C++ provides three types of smart pointers: std::unique_ptr, std::shared_ptr, and std::weak_ptr.
    Example:
        #include <memory>

        std::unique_ptr<int> ptr = std::make_unique<int>(42);
        // Automatically deallocates memory when the unique_ptr goes out of scope


3. Containers and Algorithms: Using standard containers and algorithms can help in memory management by providing a higher-level abstraction. Prefer using containers like std::vector, std::list, and std::map, which handle memory management internally.
    Example:
        #include <vector>
        std::vector<int> numbers = {1, 2, 3, 4, 5}; // Dynamic memory managed internally


4. Resource Acquisition Is Initialization (RAII): RAII is a design pattern where resource allocation is tied to the object's lifetime. When an object is constructed, it acquires the necessary resources (like memory), and when it is destructed, it releases those resources. RAII ensures that resources are automatically managed, even in the presence of exceptions.
    Example:
        class ResourceHolder {
        public:
            ResourceHolder() {
                // Acquire resources like memory
                resourcePtr = new int[1000];
            }

            ~ResourceHolder() {
                // Release resources when the object is destructed
                delete[] resourcePtr;
            }

        private:
            int* resourcePtr;
        };


5.Avoiding Manual Memory Management Whenever Possible: Whenever possible, prefer using standard containers, smart pointers, and RAII to avoid manual memory management and potential memory-related bugs. By following these memory management techniques, you can ensure efficient memory usage and avoid common pitfalls associated with manual memory management in non-garbage collected environments.