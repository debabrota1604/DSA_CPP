Properties of Red Black Tree:
The Red-Black tree satisfies all the properties of binary search tree in addition to that it satisfies following additional properties –
    1. Root property: The root is black.
    2. External property: Every leaf (Leaf is a NULL child of a node) is black in Red-Black tree.
    3. Internal property: The children of a red node are black. Hence possible parent of red node is a black node.
    4. Depth property: All the leaves have the same black depth.
    5. Path property: Every simple path from root to descendant leaf node contains same number of black nodes. 
The result of all these above-mentioned properties is that the Red-Black tree is roughly balanced.


Rules That Every Red-Black Tree Follows: 
    1. Every node has a color either red or black.
    2. The root of the tree is always black.
    3. There are no two adjacent red nodes (A red node cannot have a red parent or red child).
    4. Every path from a node (including root) to any of its descendants NULL nodes has the same number of black nodes.
    5. Every leaf (e.i. NULL node) must be colored BLACK.

Why Red-Black Trees?
Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BST. The cost of these operations may become O(n) for a skewed Binary tree. If we make sure that the height of the tree remains O(log n) after every insertion and deletion, then we can guarantee an upper bound of O(log n) for all these operations. The height of a Red-Black tree is always O(log n) where n is the number of nodes in the tree. 

Comparison with AVL Tree:
The AVL trees are more balanced compared to Red-Black Trees, but they may cause more rotations during insertion and deletion. So if your application involves frequent insertions and deletions, then Red-Black trees should be preferred. And if the insertions and deletions are less frequent and search is a more frequent operation, then AVL tree should be preferred over the Red-Black Tree.

Interesting points about Red-Black Tree:
    1. The black height of the red-black tree is the number of black nodes on a path from the root node to a leaf node. Leaf nodes are also counted as black nodes. So, a red-black tree of height h has black height >= h/2.
    2. Height of a red-black tree with n nodes is h<= 2 log(n + 1).
    3. All leaves (NIL) are black.
    4. The black depth of a node is defined as the number of black nodes from the root to that node i.e the number of black ancestors.
    5. Every red-black tree is a special case of a binary tree.

Black Height of a Red-Black Tree : 
Black height is the number of black nodes on a path from the root to a leaf. Leaf nodes are also counted black nodes. From the above properties 3 and 4, we can derive, a Red-Black Tree of height h has black-height >= h/2. 

    Number of nodes from a node to its farthest descendant leaf is no more than twice as the number of nodes to the nearest descendant leaf.

Every Red Black Tree with n nodes has height <= 2Log(n+1) 
This can be proved using the following facts:
    1. For a general Binary Tree, let k be the minimum number of nodes on all root to NULL paths, then n >= 2^k – 1 (Ex. If k is 3, then n is at least 7). This expression can also be written as k <= Log(n+1).
    2. From property 4 of Red-Black trees and above claim, we can say in a Red-Black Tree with n nodes, there is a root to leaf path with at-most Log(n+1) black nodes.
    3. From properties 3 and 5 of Red-Black trees, we can claim that the number of black nodes in a Red-Black tree is at least ⌊ n/2 ⌋ where n is the total number of nodes.
From the above points, we can conclude the fact that Red Black Tree with n nodes has a height <= 2Log(n+1)


Search Operation in Red-black Tree:
As every red-black tree is a special case of a binary tree so the searching algorithm of a red-black tree is similar to that of a binary tree.

Algorithm:
searchElement (tree, val)
Step 1:
If tree -> data = val OR tree = NULL
    Return tree
Else
If val < data
        Return searchElement (tree -> left, val)
    Else
        Return searchElement (tree -> right, val)
    [ End of if ]
[ End of if ]


Advantages:
    Red Black Trees have a guaranteed time complexity of O(log n) for basic operations like insertion, deletion, and searching.
    Red Black Trees are self-balancing.
    Red Black Trees can be used in a wide range of applications due to their efficient performance and versatility. 
    The mechanism used to maintain balance in Red Black Trees is relatively simple and easy to understand.

Disadvantages:
    Red Black Trees require one extra bit of storage for each node to store the color of the node (red or black). 
    Complexity of Implementation.
    Although Red Black Trees provide efficient performance for basic operations, they may not be the best choice for certain types of data or specific use cases.


In the Red-Black tree, we use two tools to do the balancing. 
    Recoloring
    Rotation
Recolouring is the change in colour of the node i.e. if it is red then change it to black and vice versa. It must be noted that the colour of the NULL node is always black. Moreover, we always try recolouring first, if recolouring doesn’t work, then we go for rotation. Following is a detailed algorithm. The algorithms have mainly two cases depending upon the colour of the uncle. If the uncle is red, we do recolour. If the uncle is black, we do rotations and/or recolouring.

Logic:
    First, you have to insert the node similarly to that in a binary tree and assign a red colour to it. 
    If the node is a root node then change its colour to black, but if it is not then check the colour of the parent node. 
    If its colour is black then don’t change the colour but if it is not i.e. it is red then check the colour of the node’s uncle. 
    If the node’s uncle has a red colour then change the colour of the node’s parent and uncle to black and that of grandfather to red colour and repeat the same process for him (i.e. grandfather).
    If grandfather is root then don’t change grandfather to red colour.    


Insert Algorithm:
    Let x be the newly inserted node.
    Perform standard BST insertion and make the colour of newly inserted nodes as RED.
    If x is the root, change the colour of x as BLACK (Black height of complete tree increases by 1).
    Do the following if the color of x’s parent is not BLACK and x is not the root. 
    a) If x’s uncle is RED (Grandparent must have been black from property 4) 
        (i) Change the colour of parent and uncle as BLACK. 
        (ii) Colour of a grandparent as RED. 
        (iii) Change x = x’s grandparent, repeat steps 2 and 3 for new x. 
    b) If x’s uncle is BLACK, then there can be four configurations for x, x’s parent (p) and x’s grandparent (g) (This is similar to AVL Tree) 
        (i) Left Left Case (p is left child of g and x is left child of p) 
        (ii) Left Right Case (p is left child of g and x is the right child of p) 
        (iii) Right Right Case (Mirror of case i) 
        (iv) Right Left Case (Mirror of case ii)

Deletion in a red-black tree is a bit more complicated than insertion. When a node is to be deleted, it can either have no children, one child or two children.

Here are the steps involved in deleting a node in a red-black tree:
    1. If the node to be deleted has no children, simply remove it and update the parent node.
    2. If the node to be deleted has only one child, replace the node with its child.
    3. If the node to be deleted has two children, then replace the node with its in-order successor, which is the 4. leftmost node in the right subtree. Then delete the in-order successor node as if it has at most one child.
    5.  After the node is deleted, the red-black properties might be violated. To restore these properties, some color changes and rotations are performed on the nodes in the tree. The changes are similar to those performed during insertion, but with different conditions.
The deletion operation in a red-black tree takes O(log n) time on average, making it a good choice for searching and deleting elements in large data sets.


Insertion Vs Deletion: 
    Like Insertion, recoloring and rotations are used to maintain the Red-Black properties.
    In the insert operation, we check the color of the uncle to decide the appropriate case. In the delete operation, we check the color of the sibling to decide the appropriate case.

    The main property that violates after insertion is two consecutive reds. In delete, the main violated property is, change of black height in subtrees as deletion of a black node may cause reduced black height in one root to leaf path.

    Deletion is a fairly complex process.  To understand deletion, the notion of double black is used.  When a black node is deleted and replaced by a black child, the child is marked as double black. The main task now becomes to convert this double black to single black.

Deletion Steps: (https://www.geeksforgeeks.org/deletion-in-red-black-tree/?ref=next_article)
    Following are detailed steps for deletion.
    
    1) Perform standard BST delete. When we perform standard delete operation in BST, we always end up deleting a node which is an either leaf or has only one child (For an internal node, we copy the successor and then recursively call delete for successor, successor is always a leaf node or a node with one child). So we only need to handle cases where a node is leaf or has one child. Let v be the node to be deleted and u be the child that replaces v (Note that u is NULL when v is a leaf and color of NULL is considered as Black).
    
    2) Simple Case: If either u or v is red, we mark the replaced child as black (No change in black height). Note that both u and v cannot be red as v is parent of u and two consecutive reds are not allowed in red-black tree. 

    3) If Both u and v are Black.
        3.1) Color u as double black.  Now our task reduces to convert this double black to single black. Note that If v is leaf, then u is NULL and color of NULL is considered black. So the deletion of a black leaf also causes a double black.

        3.2) Do following while the current node u is double black, and it is not the root. Let sibling of node be s. 
            (a): If sibling s is black and at least one of sibling’s children is red, perform rotation(s). Let the red child of s be r. This case can be divided in four subcases depending upon positions of s and r.
                (i) Left Left Case (s is left child of its parent and r is left child of s or both children of s are red). This is mirror of right right case shown in below diagram.
                (ii) Left Right Case (s is left child of its parent and r is right child). This is mirror of right left case shown in below diagram.
                (iii) Right Right Case (s is right child of its parent and r is right child of s or both children of s are red) 
                (iv) Right Left Case (s is right child of its parent and r is left child of s)

            (b): If sibling is black and its both children are black, perform recoloring, and recur for the parent if parent is black. 
            In this case, if parent was red, then we didn’t need to recur for parent, we can simply make it black (red + double black = single black)

            (c): If sibling is red, perform a rotation to move old sibling up, recolor the old sibling and parent. The new sibling is always black (See the below diagram). This mainly converts the tree to black sibling case (by rotation) and leads to case (a) or (b). This case can be divided in two subcases. 
                (i) Left Case (s is left child of its parent). This is mirror of right right case shown in below diagram. We right rotate the parent p. 
                (ii) Right Case (s is right child of its parent). We left rotate the parent p. 

        3.3) If u is root, make it single black and return (Black height of complete tree reduces by 1).
