What is Heap Data Structure?
A Heap is a special Tree-based Data Structure in which the tree is a complete binary tree.
Heap is a special tree-based data structure where the tree is always a complete binary tree. Heaps are of two types: Max heap and Min heap. In the case of the max-heap, the root node will have a higher value than its subtree, and for the min-heap, the root node will have a lower value than its subtree.

Types of heaps:
    Max-Heap: 
        In this heap, the value of the root node must be the greatest among all its child nodes and the same thing must be done for its left and right sub-tree also.
        The total number of comparisons required in the max heap is according to the height of the tree. The height of the complete binary tree is always logn; therefore, the time complexity would also be O(logn).

    Min-Heap: 
        In this heap, the value of the root node must be the smallest among all its child nodes and the same thing must be done for its left and right sub-tree also.
        The total number of comparisons required in the min heap is according to the height of the tree. The height of the complete binary tree is always logn; therefore, the time complexity would also be O(logn).



Properties of Heap:
    Complete Binary Tree: A heap tree is a complete binary tree, meaning all levels of the tree are fully filled except possibly the last level, which is filled from left to right. This property ensures that the tree is efficiently represented using an array.
    
    Heap Property: This property ensures that the minimum (or maximum) element is always at the root of the tree according to the heap type.
    
    Parent-Child Relationship: The relationship between a parent node at index ‘i’ and its children is given by the formulas: left child at index 2i+1 and right child at index 2i+2 for 0-based indexing of node numbers.
    
    Efficient Insertion and Removal: Insertion and removal operations in heap trees are efficient. New elements are inserted at the next available position in the bottom-rightmost level, and the heap property is restored by comparing the element with its parent and swapping if necessary. Removal of the root element involves replacing it with the last element and heapifying down.
    
    Efficient Access to Extremal Elements: The minimum or maximum element is always at the root of the heap, allowing constant-time access.



Operations of Heap:
    Heapify: a process of creating a heap from an array.
    Insertion: process to insert an element in existing heap time complexity O(log N).
    Deletion: deleting the top element of the heap or the highest priority element, and then organizing the heap and returning the element with time complexity O(log N).
    Peek: to check or find the most prior element in the heap, (max or min element for max and min heap).

Operations Supported by Heap:
Operations supported by min – heap and max – heap are same. The difference is just that min-heap contains minimum element at root of the tree and max – heap contains maximum element at the root of the tree.

Heapify:
    It is the process to rearrange the elements to maintain the property of heap data structure. It is done when a certain node creates an imbalance in the heap due to some operations on that node. It takes O(log N) to balance the tree. 
        For max-heap, it balances in such a way that the maximum element is the root of that binary tree and 
        For min-heap, it balances in such a way that the minimum element is the root of that binary tree.
    
Insertion:
    If we insert a new element into the heap since we are adding a new element into the heap so it will distort the properties of the heap so we need to perform the heapify operation so that it maintains the property of the heap.
    This operation also takes O(logN) time.
    Examples:

    Assume initially heap(taking max-heap) is as follows

         8
       /   \
      4     5
    / \
   1   2

    Now if we insert 10 into the heap
          8
        /   \
       4      5
     /  \    /
    1    2  10 

    After heapify operation final heap will be look like this
          10
        /    \
       4      8
     /  \     /
    1    2   5


Deletion:
    If we delete the element from the heap it always deletes the root element of the tree and replaces it with the last element of the tree.
Since we delete the root element from the heap it will distort the properties of the heap so we need to perform heapify operations so that it maintains the property of the heap. 
It takes O(logN) time.

Example:

    Assume initially heap(taking max-heap) is as follows
              15
             /   \
            5     7
          /  \
        2     3

    Now if we delete 15 into the heap it will be replaced by leaf node of the tree for temporary.
              3
            /   \
           5     7
         /    
        2

    After heapify operation final heap will be look like this
              7
            /   \
           5     3
         /   
        2

getMax (For max-heap) or getMin (For min-heap):
    It finds the maximum element or minimum element for max-heap and min-heap respectively and as we know minimum and maximum elements will always be the root node itself for min-heap and max-heap respectively. It takes O(1) time.

removeMin or removeMax:
    This operation returns and deletes the maximum element and minimum element from the max-heap and min-heap respectively. In short, it deletes the root element of the heap binary tree.

Implementation of Heap Data Structure:-
    The following code shows the implementation of a max-heap.

    Let’s understand the maxHeapify function in detail:-

    maxHeapify is the function responsible for restoring the property of the Max Heap. It arranges the node i, and its subtrees accordingly so that the heap property is maintained.
        1. Suppose we are given an array, arr[] representing the complete binary tree. The left and the right child of ith node are in indices 2*i+1 and 2*i+2.
        2. We set the index of the current element, i, as the ‘MAXIMUM’.
        3. If arr[2 * i + 1] > arr[i], i.e., the left child is larger than the current value, it is set as ‘MAXIMUM’.
        4. Similarly if arr[2 * i + 2] > arr[i], i.e., the right child is larger than the current value, it is set as ‘MAXIMUM’.
        5. Swap the ‘MAXIMUM’ with the current element.
        6. Repeat steps 2 to 5 till the property of the heap is restored.

Applications of Heap Data Structure:
    1. Priority Queues: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(log N) time. 
    2. Binomial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also in O(log N) time which is an O(N) operation in Binary Heap.
    3. Order statistics: The Heap data structure can be used to efficiently find the kth smallest (or largest) element in an array. You can see this gfg article to know more about the kth smallest or largest element.

Application of Heap Data Structure:
    Priority queues: The heap data structure is commonly used to implement priority queues, where elements are stored in a heap and ordered based on their priority. This allows constant-time access to the highest-priority element, making it an efficient data structure for managing tasks or events that require prioritization.
    
    Heapsort algorithm: The heap data structure is the basis for the heapsort algorithm, which is an efficient sorting algorithm with a worst-case time complexity of O(n log n). The heapsort algorithm is used in various applications, including database indexing and numerical analysis.
    
    Memory management: The heap data structure is used in memory management systems to allocate and deallocate memory dynamically. The heap is used to store the memory blocks, and the heap data structure is used to efficiently manage the memory blocks and allocate them to programs as needed.
    
    Graph algorithms: The heap data structure is used in various graph algorithms, including Dijkstra’s algorithm, Prim’s algorithm, and Kruskal’s algorithm. These algorithms require efficient priority queue implementation, which can be achieved using the heap data structure.
    
    Job scheduling: The heap data structure is used in job scheduling algorithms, where tasks are scheduled based on their priority or deadline. The heap data structure allows efficient access to the highest-priority task, making it a useful data structure for job scheduling applications.


Real-Time Application of Heap:
    Patient treatment: In a hospital, an emergency patient, or the patient with more injury is treated first. Here the priority is the degree of injury.
    Systems concerned with security use heap sort, like the Linux kernel.

Application of Heap:
    Priority Queues: Heaps are commonly used to implement priority queues, where elements with higher priority are extracted first. This is useful in many applications such as scheduling tasks, handling interruptions, and processing events.
    
    Sorting Algorithms: Heapsort, a comparison-based sorting algorithm, is implemented using the Heap data structure. It has a time complexity of O(n log n), making it efficient for large datasets.
    
    Graph algorithms: Heaps are used in graph algorithms such as Dijkstra’s shortest path algorithm, Prim’s minimum spanning tree algorithm, and the A* search algorithm.
    
    File Compression: Heaps are used in data compression algorithms such as Huffman coding, which uses a priority queue implemented as a min-heap to build a Huffman tree.
    
    Dynamic programming: Heaps are used in dynamic programming algorithms such as the greedy algorithm, where elements are processed in order of priority.
    
    Medical Applications: In medical applications, heaps are used to store and manage patient information based on priority, such as vital signs, treatments, and test results.
    
    External sorting: Heaps are used in external sorting algorithms to sort large datasets that do not fit into memory, by processing chunks of data in a priority queue.
    
    Load balancing: Heaps are used in load balancing algorithms to distribute tasks or requests to servers, by processing elements with the lowest load first.
    
    Online algorithms: Heaps are used in online algorithms, where elements are processed in real-time as they arrive, such as recommendation systems, event processing, and streaming data.
    
    Stock market: Heaps are used in financial applications, such as stock market analysis and algorithmic trading, to process and manage large amounts of stock data based on priority.
    
    Heap Data Structure is generally taught with Heapsort. Heapsort algorithm has limited uses because Quicksort is better in practice. Nevertheless, the Heap data structure itself is enormously used. Following are some uses other than Heapsort. 
        Priority Queues: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete() and extractmax(), decreaseKey() operations in O(logn) time. Binomial Heap and Fibonacci Heap are variations of Binary Heap. These variations perform union also in O(logn) time which is a O(n) operation in Binary Heap. Heap Implemented priority queues are used in Graph algorithms like Prim’s Algorithm and Dijkstra’s algorithm. 

        Order statistics: The Heap data structure can be used to efficiently find the kth smallest (or largest) element in an array. See method 4 and 6 of this post for details. 

Advantages of Heaps:
    1. Fast access to maximum/minimum element (O(1))
    2. Efficient Insertion and Deletion operations (O(log n))
    3. Flexible size
    4. Can be efficiently implemented as an array
    5. Suitable for real-time applications

Advantages of Heap Data Structure:
    Efficient insertion and deletion: The heap data structure allows efficient insertion and deletion of elements. When a new element is added to the heap, it is placed at the bottom of the heap and moved up to its correct position using the heapify operation. Similarly, when an element is removed from the heap, it is replaced by the bottom element, and the heap is restructured using the heapify operation.
    
    Efficient priority queue: The heap data structure is commonly used to implement a priority queue, where the highest priority element is always at the top of the heap. The heap allows constant-time access to the highest priority element, making it an efficient data structure for implementing priority queues.
    
    Guaranteed access to the maximum or minimum element: In a max-heap, the top element is always the maximum element, and in a min-heap, the top element is always the minimum element. This provides guaranteed access to the maximum or minimum element in the heap, making it useful in algorithms that require access to the extreme values.
    
    Space efficiency: The heap data structure requires less memory compared to other data structures, such as linked lists or arrays, as it stores elements in a complete binary tree structure.
    Heap-sort algorithm: The heap data structure forms the basis for the heap-sort algorithm, which is an efficient sorting algorithm that has a worst-case time complexity of O(n log n).

Disadvantages of Heaps:
    1. Not suitable for searching for an element other than maximum/minimum (O(n) in worst case)
    2. Extra memory overhead to maintain heap structure
    3. Slower than other data structures like arrays and linked lists for non-priority queue operations.

Disadvantages of Heap Data Structure:
    Lack of flexibility: The heap data structure is not very flexible, as it is designed to maintain a specific order of elements. This means that it may not be suitable for some applications that require more flexible data structures.
    
    Not ideal for searching: While the heap data structure allows efficient access to the top element, it is not ideal for searching for a specific element in the heap. Searching for an element in a heap requires traversing the entire tree, which has a time complexity of O(n).
    
    Not a stable data structure: The heap data structure is not a stable data structure, which means that the relative order of equal elements may not be preserved when the heap is constructed or modified.
    
    Memory management: The heap data structure requires dynamic memory allocation, which can be a challenge in some systems with limited memory. In addition, managing the memory allocated to the heap can be complex and error-prone.
    
    Complexity: While the heap data structure allows efficient insertion, deletion, and priority queue implementation, it has a worst-case time complexity of O(n log n), which may not be optimal for some applications that require faster algorithms.


Why and when to use heap?
    Heaps are used in a variety of algorithms and data structures to efficiently manage and retrieve elements based on their priority. Some of the main use cases of heaps include:

    Priority Queues: Heaps can be used to implement priority queues, where elements with higher priority are retrieved before elements with lower priority.
    
    Sorting: Heapsort is a comparison-based sorting algorithm that can sort an array in O(n log n) time.
    
    Graph algorithms: Heaps are used in graph algorithms such as Dijkstra’s shortest path algorithm to efficiently find the node with the smallest distance from the source.
    
    Median Maintenance: Heaps can be used to efficiently maintain the median of a dynamic set of numbers.
    
    Scheduling Tasks: Heaps can be used to schedule tasks based on their priority in real-time operating systems.
    
    Memory Management: Heaps are used in memory management to allocate and deallocate memory efficiently.

In general, heaps are used in situations where elements need to be efficiently retrieved and managed based on their priority. Heaps are efficient because they can retrieve, insert, and delete elements in O(log n) time, which is faster than the O(n) time required by a linear search. Additionally, heaps are easy to implement and use in a variety of algorithms and data structures.